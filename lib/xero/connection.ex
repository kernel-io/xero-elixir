# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Connection do
  @moduledoc """
  Handle Tesla connections for Xero.
  """

  use Tesla

  # Add any middleware here (authentication)
  plug(Tesla.Middleware.BaseUrl, "https://api.xero.com/api.xro/2.0")
  plug(Tesla.Middleware.Headers, [{"user-agent", "Elixir"}])
  plug(Tesla.Middleware.EncodeJson, engine: Poison)

  @scopes [
    # Grant read-only access to your email
    "email",
    # Grant read-only access to your open id
    "openid",
    # your profile information
    "profile",
    # Grant read-write access to attachments
    "accounting.attachments",
    # Grant read-only access to attachments
    "accounting.attachments.read",
    # Grant read-write access to contacts and contact groups
    "accounting.contacts",
    # Grant read-only access to contacts and contact groups
    "accounting.contacts.read",
    # Grant read-only access to journals
    "accounting.journals.read",
    # Grant read-only access to accounting reports
    "accounting.reports.read",
    # Grant read-only access to 1099 reports
    "accounting.reports.tenninetynine.read",
    # Grant read-write access to organisation and account settings
    "accounting.settings",
    # Grant read-only access to organisation and account settings
    "accounting.settings.read",
    # Grant read-write access to bank transactions, credit notes, invoices, repeating invoices
    "accounting.transactions",
    # Grant read-only access to invoices
    "accounting.transactions.read",
    # Grant read-write access to payment services
    "paymentservices"
  ]

  @doc """
  Configure a client connection using a provided OAuth2 token as a Bearer token

  ## Parameters

  - token (String): Bearer token

  ## Returns

  Tesla.Env.client
  """
  @spec new(String.t()) :: Tesla.Env.client()
  def new(token) when is_binary(token) do
    Tesla.client([{Tesla.Middleware.Headers, [{"authorization", "Bearer #{token}"}]}])
  end

  @doc """
  Configure a client connection using a function which yields a Bearer token.

  ## Parameters

  - token_fetcher (function arity of 1): Callback which provides an OAuth2 token
    given a list of scopes

  ## Returns

  Tesla.Env.client
  """
  @spec new((list(String.t()) -> String.t())) :: Tesla.Env.client()
  def new(token_fetcher) when is_function(token_fetcher) do
    token_fetcher.(@scopes)
    |> new
  end

  @doc """
  Configure an authless client connection

  # Returns

  Tesla.Env.client
  """
  @spec new() :: Tesla.Env.client()
  def new do
    Tesla.client([])
  end
end
