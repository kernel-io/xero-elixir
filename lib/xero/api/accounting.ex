# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Api.Accounting do
  @moduledoc """
  API calls for all endpoints tagged `Accounting`.
  """

  alias Xero.Connection
  import Xero.RequestBuilder

  @doc """
  Creates a new chart of accounts

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - account (Account): Account object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Accounts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_account(Tesla.Env.client(), Xero.Model.Account.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Accounts.t()} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def create_account(connection, account, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Accounts")
    |> add_param(:body, :body, account)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Accounts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates an attachment on a specific account

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_account_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_account_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        account_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/Accounts/#{account_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates an attachment for a specific bank transaction by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_bank_transaction_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_bank_transaction_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        bank_transaction_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/BankTransactions/#{bank_transaction_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific bank transactions

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_bank_transaction_history_record(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_bank_transaction_history_record(
        connection,
        history_records,
        xero_tenant_id,
        bank_transaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/BankTransactions/#{bank_transaction_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates one or more spent or received money transaction

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - bank_transactions (BankTransactions): BankTransactions with an array of BankTransaction objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.BankTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_bank_transactions(
          Tesla.Env.client(),
          Xero.Model.BankTransactions.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.BankTransactions.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_bank_transactions(connection, bank_transactions, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:put)
    |> url("/BankTransactions")
    |> add_param(:body, :body, bank_transactions)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransactions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a bank transfer

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - bank_transfers (BankTransfers): BankTransfers with array of BankTransfer objects in request body
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.BankTransfers.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_bank_transfer(
          Tesla.Env.client(),
          Xero.Model.BankTransfers.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.BankTransfers.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_bank_transfer(connection, bank_transfers, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/BankTransfers")
    |> add_param(:body, :body, bank_transfers)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransfers{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_bank_transfer_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_bank_transfer_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        bank_transfer_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/BankTransfers/#{bank_transfer_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific bank transfer

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_bank_transfer_history_record(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_bank_transfer_history_record(
        connection,
        history_records,
        xero_tenant_id,
        bank_transfer_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/BankTransfers/#{bank_transfer_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates one or many batch payments for invoices

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - batch_payments (BatchPayments): BatchPayments with an array of Payments in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.BatchPayments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_batch_payment(
          Tesla.Env.client(),
          Xero.Model.BatchPayments.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.BatchPayments.t()}
          | {:error, Tesla.Env.t()}
  def create_batch_payment(connection, batch_payments, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/BatchPayments")
    |> add_param(:body, :body, batch_payments)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BatchPayments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific batch payment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - batch_payment_id (String.t): Unique identifier for BatchPayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_batch_payment_history_record(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_batch_payment_history_record(
        connection,
        history_records,
        xero_tenant_id,
        batch_payment_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/BatchPayments/#{batch_payment_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a new custom payment service for a specific branding theme

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - payment_service (PaymentService): PaymentService object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - branding_theme_id (String.t): Unique identifier for a Branding Theme
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PaymentServices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_branding_theme_payment_services(
          Tesla.Env.client(),
          Xero.Model.PaymentService.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.PaymentServices.t()}
          | {:error, Tesla.Env.t()}
  def create_branding_theme_payment_services(
        connection,
        payment_service,
        xero_tenant_id,
        branding_theme_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/BrandingThemes/#{branding_theme_id}/PaymentServices")
    |> add_param(:body, :body, payment_service)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PaymentServices{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_contact_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_contact_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        contact_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/Contacts/#{contact_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a contact group

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - contact_groups (ContactGroups): ContactGroups with an array of names in request body
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ContactGroups.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_contact_group(
          Tesla.Env.client(),
          Xero.Model.ContactGroups.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.ContactGroups.t()}
          | {:error, Tesla.Env.t()}
  def create_contact_group(connection, contact_groups, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/ContactGroups")
    |> add_param(:body, :body, contact_groups)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ContactGroups{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates contacts to a specific contact group

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - contacts (Contacts): Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_group_id (String.t): Unique identifier for a Contact Group
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_contact_group_contacts(
          Tesla.Env.client(),
          Xero.Model.Contacts.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def create_contact_group_contacts(
        connection,
        contacts,
        xero_tenant_id,
        contact_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/ContactGroups/#{contact_group_id}/Contacts")
    |> add_param(:body, :body, contacts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a new history record for a specific contact

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_contact_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_contact_history(connection, history_records, xero_tenant_id, contact_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Contacts/#{contact_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates multiple contacts (bulk) in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - contacts (Contacts): Contacts with an array of Contact objects to create in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_contacts(Tesla.Env.client(), Xero.Model.Contacts.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def create_contacts(connection, contacts, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/Contacts")
    |> add_param(:body, :body, contacts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates allocation for a specific credit note

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - allocations (Allocations): Allocations with array of Allocation object in body of request.
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Allocations.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_credit_note_allocation(
          Tesla.Env.client(),
          Xero.Model.Allocations.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Allocations.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_credit_note_allocation(
        connection,
        allocations,
        xero_tenant_id,
        credit_note_id,
        opts \\ []
      ) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/CreditNotes/#{credit_note_id}/Allocations")
    |> add_param(:body, :body, allocations)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Allocations{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates an attachment for a specific credit note

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
    - :include_online (boolean()): Allows an attachment to be seen by the end customer within their online invoice
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_credit_note_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_credit_note_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        credit_note_id,
        file_name,
        opts \\ []
      ) do
    optional_params = %{
      :IncludeOnline => :query
    }

    %{}
    |> method(:put)
    |> url("/CreditNotes/#{credit_note_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Retrieves history records of a specific credit note

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_credit_note_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_credit_note_history(
        connection,
        history_records,
        xero_tenant_id,
        credit_note_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/CreditNotes/#{credit_note_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a new credit note

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - credit_notes (CreditNotes): Credit Notes with array of CreditNote object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.CreditNotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_credit_notes(Tesla.Env.client(), Xero.Model.CreditNotes.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.CreditNotes.t()}
          | {:error, Tesla.Env.t()}
  def create_credit_notes(connection, credit_notes, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:put)
    |> url("/CreditNotes")
    |> add_param(:body, :body, credit_notes)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CreditNotes{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Create a new currency for a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - currency (Currency): Currency object in the body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Currencies.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_currency(Tesla.Env.client(), Xero.Model.Currency.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Currencies.t()} | {:error, Tesla.Env.t()}
  def create_currency(connection, currency, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Currencies")
    |> add_param(:body, :body, currency)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Currencies{}}
    ])
  end

  @doc """
  Creates new employees used in Xero payrun

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - employees (Employees): Employees with array of Employee object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Employees.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_employees(Tesla.Env.client(), Xero.Model.Employees.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Employees.t()} | {:error, Tesla.Env.t()}
  def create_employees(connection, employees, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/Employees")
    |> add_param(:body, :body, employees)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Employees{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific expense claim

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - expense_claim_id (String.t): Unique identifier for a ExpenseClaim
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_expense_claim_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def create_expense_claim_history(
        connection,
        history_records,
        xero_tenant_id,
        expense_claim_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/ExpenseClaims/#{expense_claim_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Creates expense claims

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - expense_claims (ExpenseClaims): ExpenseClaims with array of ExpenseClaim object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ExpenseClaims.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_expense_claims(
          Tesla.Env.client(),
          Xero.Model.ExpenseClaims.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.ExpenseClaims.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_expense_claims(connection, expense_claims, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/ExpenseClaims")
    |> add_param(:body, :body, expense_claims)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ExpenseClaims{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates an attachment for a specific invoice or purchase bill by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
    - :include_online (boolean()): Allows an attachment to be seen by the end customer within their online invoice
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_invoice_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_invoice_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        invoice_id,
        file_name,
        opts \\ []
      ) do
    optional_params = %{
      :IncludeOnline => :query
    }

    %{}
    |> method(:put)
    |> url("/Invoices/#{invoice_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_invoice_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_invoice_history(connection, history_records, xero_tenant_id, invoice_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Invoices/#{invoice_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates one or more sales invoices or purchase bills

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - invoices (Invoices): Invoices with an array of invoice objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Invoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_invoices(Tesla.Env.client(), Xero.Model.Invoices.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Invoices.t()} | {:error, Tesla.Env.t()}
  def create_invoices(connection, invoices, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:put)
    |> url("/Invoices")
    |> add_param(:body, :body, invoices)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Invoices{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific item

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - item_id (String.t): Unique identifier for an Item
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_item_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def create_item_history(connection, history_records, xero_tenant_id, item_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Items/#{item_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Creates one or more items

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - items (Items): Items with an array of Item objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Items.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_items(Tesla.Env.client(), Xero.Model.Items.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Items.t()} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def create_items(connection, items, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:put)
    |> url("/Items")
    |> add_param(:body, :body, items)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Items{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates linked transactions (billable expenses)

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - linked_transaction (LinkedTransaction): LinkedTransaction object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.LinkedTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_linked_transaction(
          Tesla.Env.client(),
          Xero.Model.LinkedTransaction.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.LinkedTransactions.t()}
          | {:error, Tesla.Env.t()}
  def create_linked_transaction(connection, linked_transaction, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/LinkedTransactions")
    |> add_param(:body, :body, linked_transaction)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.LinkedTransactions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a specific attachment for a specific manual journal by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_manual_journal_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_manual_journal_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        manual_journal_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/ManualJournals/#{manual_journal_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific manual journal

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_manual_journal_history_record(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_manual_journal_history_record(
        connection,
        history_records,
        xero_tenant_id,
        manual_journal_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/ManualJournals/#{manual_journal_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates one or more manual journals

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - manual_journals (ManualJournals): ManualJournals array with ManualJournal object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.ManualJournals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_manual_journals(
          Tesla.Env.client(),
          Xero.Model.ManualJournals.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.ManualJournals.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_manual_journals(connection, manual_journals, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/ManualJournals")
    |> add_param(:body, :body, manual_journals)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ManualJournals{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a single allocation for a specific overpayment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - allocations (Allocations): Allocations array with Allocation object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - overpayment_id (String.t): Unique identifier for a Overpayment
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Allocations.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_overpayment_allocations(
          Tesla.Env.client(),
          Xero.Model.Allocations.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Allocations.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_overpayment_allocations(
        connection,
        allocations,
        xero_tenant_id,
        overpayment_id,
        opts \\ []
      ) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/Overpayments/#{overpayment_id}/Allocations")
    |> add_param(:body, :body, allocations)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Allocations{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific overpayment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - overpayment_id (String.t): Unique identifier for a Overpayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_overpayment_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_overpayment_history(
        connection,
        history_records,
        xero_tenant_id,
        overpayment_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/Overpayments/#{overpayment_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a single payment for invoice or credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - payment (Payment): Request body with a single Payment object
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Payments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_payment(Tesla.Env.client(), Xero.Model.Payment.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Payments.t()} | {:error, Tesla.Env.t()}
  def create_payment(connection, payment, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Payments")
    |> add_param(:body, :body, payment)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Payments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific payment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - payment_id (String.t): Unique identifier for a Payment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_payment_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_payment_history(connection, history_records, xero_tenant_id, payment_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Payments/#{payment_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a payment service

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - payment_services (PaymentServices): PaymentServices array with PaymentService object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PaymentServices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_payment_service(
          Tesla.Env.client(),
          Xero.Model.PaymentServices.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.PaymentServices.t()}
          | {:error, Tesla.Env.t()}
  def create_payment_service(connection, payment_services, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/PaymentServices")
    |> add_param(:body, :body, payment_services)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PaymentServices{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates multiple payments for invoices or credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - payments (Payments): Payments array with Payment object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Payments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_payments(Tesla.Env.client(), Xero.Model.Payments.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Payments.t()} | {:error, Tesla.Env.t()}
  def create_payments(connection, payments, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/Payments")
    |> add_param(:body, :body, payments)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Payments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Allows you to create an Allocation for prepayments

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - allocations (Allocations): Allocations with an array of Allocation object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - prepayment_id (String.t): Unique identifier for a PrePayment
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Allocations.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_prepayment_allocations(
          Tesla.Env.client(),
          Xero.Model.Allocations.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Allocations.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_prepayment_allocations(
        connection,
        allocations,
        xero_tenant_id,
        prepayment_id,
        opts \\ []
      ) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/Prepayments/#{prepayment_id}/Allocations")
    |> add_param(:body, :body, allocations)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Allocations{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific prepayment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - prepayment_id (String.t): Unique identifier for a PrePayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_prepayment_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_prepayment_history(
        connection,
        history_records,
        xero_tenant_id,
        prepayment_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/Prepayments/#{prepayment_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates attachment for a specific purchase order

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_purchase_order_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_purchase_order_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        purchase_order_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/PurchaseOrders/#{purchase_order_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific purchase orders

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_purchase_order_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_purchase_order_history(
        connection,
        history_records,
        xero_tenant_id,
        purchase_order_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/PurchaseOrders/#{purchase_order_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates one or more purchase orders

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - purchase_orders (PurchaseOrders): PurchaseOrders with an array of PurchaseOrder object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.PurchaseOrders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_purchase_orders(
          Tesla.Env.client(),
          Xero.Model.PurchaseOrders.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.PurchaseOrders.t()}
          | {:error, Tesla.Env.t()}
  def create_purchase_orders(connection, purchase_orders, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/PurchaseOrders")
    |> add_param(:body, :body, purchase_orders)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PurchaseOrders{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates attachment for a specific quote

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_quote_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_quote_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        quote_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/Quotes/#{quote_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific quote

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_quote_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_quote_history(connection, history_records, xero_tenant_id, quote_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Quotes/#{quote_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Create one or more quotes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - quotes (Quotes): Quotes with an array of Quote object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Quotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_quotes(Tesla.Env.client(), Xero.Model.Quotes.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Quotes.t()} | {:error, Tesla.Env.t()}
  def create_quotes(connection, quotes, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:put)
    |> url("/Quotes")
    |> add_param(:body, :body, quotes)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Quotes{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates draft expense claim receipts for any user

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - receipts (Receipts): Receipts with an array of Receipt object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Receipts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_receipt(Tesla.Env.client(), Xero.Model.Receipts.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Receipts.t()} | {:error, Tesla.Env.t()}
  def create_receipt(connection, receipts, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:put)
    |> url("/Receipts")
    |> add_param(:body, :body, receipts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Receipts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates an attachment on a specific expense claim receipts by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_receipt_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_receipt_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        receipt_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/Receipts/#{receipt_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a history record for a specific receipt

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_receipt_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_receipt_history(connection, history_records, xero_tenant_id, receipt_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/Receipts/#{receipt_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates an attachment from a specific repeating invoices by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_repeating_invoice_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def create_repeating_invoice_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        repeating_invoice_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a  history record for a specific repeating invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - history_records (HistoryRecords): HistoryRecords containing an array of HistoryRecord objects in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_repeating_invoice_history(
          Tesla.Env.client(),
          Xero.Model.HistoryRecords.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.HistoryRecords.t()}
          | {:error, Tesla.Env.t()}
  def create_repeating_invoice_history(
        connection,
        history_records,
        xero_tenant_id,
        repeating_invoice_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/History")
    |> add_param(:body, :body, history_records)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates one or more tax rates

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - tax_rates (TaxRates): TaxRates array with TaxRate object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TaxRates.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_tax_rates(Tesla.Env.client(), Xero.Model.TaxRates.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.TaxRates.t()} | {:error, Tesla.Env.t()}
  def create_tax_rates(connection, tax_rates, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/TaxRates")
    |> add_param(:body, :body, tax_rates)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TaxRates{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Create tracking categories

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - tracking_category (TrackingCategory): TrackingCategory object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingCategories.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_tracking_category(
          Tesla.Env.client(),
          Xero.Model.TrackingCategory.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.TrackingCategories.t()}
          | {:error, Tesla.Env.t()}
  def create_tracking_category(connection, tracking_category, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/TrackingCategories")
    |> add_param(:body, :body, tracking_category)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingCategories{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates options for a specific tracking category

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - tracking_option (TrackingOption): TrackingOption object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - tracking_category_id (String.t): Unique identifier for a TrackingCategory
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingOptions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_tracking_options(
          Tesla.Env.client(),
          Xero.Model.TrackingOption.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.TrackingOptions.t()}
          | {:error, Tesla.Env.t()}
  def create_tracking_options(
        connection,
        tracking_option,
        xero_tenant_id,
        tracking_category_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/TrackingCategories/#{tracking_category_id}/Options")
    |> add_param(:body, :body, tracking_option)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingOptions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Deletes a chart of accounts

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Accounts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_account(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Accounts.t()} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def delete_account(connection, xero_tenant_id, account_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/Accounts/#{account_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Accounts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Deletes a specific contact from a contact group using a unique contact Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_group_id (String.t): Unique identifier for a Contact Group
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_contact_group_contact(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def delete_contact_group_contact(
        connection,
        xero_tenant_id,
        contact_group_id,
        contact_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/ContactGroups/#{contact_group_id}/Contacts/#{contact_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Deletes all contacts from a specific contact group

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_group_id (String.t): Unique identifier for a Contact Group
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_contact_group_contacts(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_contact_group_contacts(connection, xero_tenant_id, contact_group_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/ContactGroups/#{contact_group_id}/Contacts")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Deletes a specific item

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - item_id (String.t): Unique identifier for an Item
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_item(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def delete_item(connection, xero_tenant_id, item_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/Items/#{item_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Deletes a specific linked transactions (billable expenses)

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - linked_transaction_id (String.t): Unique identifier for a LinkedTransaction
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_linked_transaction(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def delete_linked_transaction(connection, xero_tenant_id, linked_transaction_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/LinkedTransactions/#{linked_transaction_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific payment for invoices and credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - payment_delete (PaymentDelete):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - payment_id (String.t): Unique identifier for a Payment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Payments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_payment(
          Tesla.Env.client(),
          Xero.Model.PaymentDelete.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Payments.t()} | {:error, Tesla.Env.t()}
  def delete_payment(connection, payment_delete, xero_tenant_id, payment_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Payments/#{payment_id}")
    |> add_param(:body, :body, payment_delete)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Payments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Deletes a specific tracking category

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - tracking_category_id (String.t): Unique identifier for a TrackingCategory
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingCategories.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_tracking_category(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.TrackingCategories.t()}
          | {:error, Tesla.Env.t()}
  def delete_tracking_category(connection, xero_tenant_id, tracking_category_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/TrackingCategories/#{tracking_category_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingCategories{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Deletes a specific option for a specific tracking category

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - tracking_category_id (String.t): Unique identifier for a TrackingCategory
  - tracking_option_id (String.t): Unique identifier for a Tracking Option
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingOptions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_tracking_options(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.TrackingOptions.t()}
          | {:error, Tesla.Env.t()}
  def delete_tracking_options(
        connection,
        xero_tenant_id,
        tracking_category_id,
        tracking_option_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/TrackingCategories/#{tracking_category_id}/Options/#{tracking_option_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingOptions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Sends a copy of a specific invoice to related contact via email

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - request_empty (RequestEmpty):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec email_invoice(
          Tesla.Env.client(),
          Xero.Model.RequestEmpty.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def email_invoice(connection, request_empty, xero_tenant_id, invoice_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Invoices/#{invoice_id}/Email")
    |> add_param(:body, :body, request_empty)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Retrieves a single chart of accounts by using a unique account Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Accounts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_account(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Accounts.t()} | {:error, Tesla.Env.t()}
  def get_account(connection, xero_tenant_id, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Accounts/#{account_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Accounts{}}
    ])
  end

  @doc """
  Retrieves an attachment for a specific account by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_account_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_account_attachment_by_file_name(
        connection,
        xero_tenant_id,
        account_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Accounts/#{account_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific account using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_account_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_account_attachment_by_id(
        connection,
        xero_tenant_id,
        account_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Accounts/#{account_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific accounts by using a unique account Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_account_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_account_attachments(connection, xero_tenant_id, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Accounts/#{account_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves the full chart of accounts

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.Accounts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_accounts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Accounts.t()} | {:error, Tesla.Env.t()}
  def get_accounts(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/Accounts")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Accounts{}}
    ])
  end

  @doc """
  Retrieves a single spent or received money transaction by using a unique bank transaction Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.BankTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transaction(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.BankTransactions.t()} | {:error, Tesla.Env.t()}
  def get_bank_transaction(connection, xero_tenant_id, bank_transaction_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/BankTransactions/#{bank_transaction_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransactions{}}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific bank transaction by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transaction_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_bank_transaction_attachment_by_file_name(
        connection,
        xero_tenant_id,
        bank_transaction_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/BankTransactions/#{bank_transaction_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves specific attachments from a specific BankTransaction using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transaction_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_bank_transaction_attachment_by_id(
        connection,
        xero_tenant_id,
        bank_transaction_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/BankTransactions/#{bank_transaction_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves any attachments from a specific bank transactions

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transaction_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_bank_transaction_attachments(
        connection,
        xero_tenant_id,
        bank_transaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/BankTransactions/#{bank_transaction_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves any spent or received money transactions

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :page (integer()): Up to 100 bank transactions will be returned in a single API call with line items details
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.BankTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transactions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.BankTransactions.t()} | {:error, Tesla.Env.t()}
  def get_bank_transactions(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :page => :query,
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/BankTransactions")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransactions{}}
    ])
  end

  @doc """
  Retrieves history from a specific bank transaction using a unique bank transaction Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transactions_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_bank_transactions_history(connection, xero_tenant_id, bank_transaction_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BankTransactions/#{bank_transaction_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves specific bank transfers by using a unique bank transfer Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.BankTransfers.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transfer(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.BankTransfers.t()} | {:error, Tesla.Env.t()}
  def get_bank_transfer(connection, xero_tenant_id, bank_transfer_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BankTransfers/#{bank_transfer_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransfers{}}
    ])
  end

  @doc """
  Retrieves a specific attachment on a specific bank transfer by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transfer_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_bank_transfer_attachment_by_file_name(
        connection,
        xero_tenant_id,
        bank_transfer_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/BankTransfers/#{bank_transfer_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific bank transfer using a unique attachment ID

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transfer_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_bank_transfer_attachment_by_id(
        connection,
        xero_tenant_id,
        bank_transfer_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/BankTransfers/#{bank_transfer_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments from a specific bank transfer

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transfer_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_bank_transfer_attachments(connection, xero_tenant_id, bank_transfer_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BankTransfers/#{bank_transfer_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves history from a specific bank transfer using a unique bank transfer Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transfer_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_bank_transfer_history(connection, xero_tenant_id, bank_transfer_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BankTransfers/#{bank_transfer_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves all bank transfers

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.BankTransfers.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_bank_transfers(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.BankTransfers.t()} | {:error, Tesla.Env.t()}
  def get_bank_transfers(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/BankTransfers")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransfers{}}
    ])
  end

  @doc """
  Retrieves history from a specific batch payment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - batch_payment_id (String.t): Unique identifier for BatchPayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_batch_payment_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_batch_payment_history(connection, xero_tenant_id, batch_payment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BatchPayments/#{batch_payment_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves either one or many batch payments for invoices

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.BatchPayments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_batch_payments(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.BatchPayments.t()} | {:error, Tesla.Env.t()}
  def get_batch_payments(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/BatchPayments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BatchPayments{}}
    ])
  end

  @doc """
  Retrieves a specific branding theme using a unique branding theme Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - branding_theme_id (String.t): Unique identifier for a Branding Theme
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.BrandingThemes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_branding_theme(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.BrandingThemes.t()} | {:error, Tesla.Env.t()}
  def get_branding_theme(connection, xero_tenant_id, branding_theme_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BrandingThemes/#{branding_theme_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BrandingThemes{}}
    ])
  end

  @doc """
  Retrieves the payment services for a specific branding theme

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - branding_theme_id (String.t): Unique identifier for a Branding Theme
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PaymentServices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_branding_theme_payment_services(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.PaymentServices.t()} | {:error, Tesla.Env.t()}
  def get_branding_theme_payment_services(
        connection,
        xero_tenant_id,
        branding_theme_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/BrandingThemes/#{branding_theme_id}/PaymentServices")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PaymentServices{}}
    ])
  end

  @doc """
  Retrieves all the branding themes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.BrandingThemes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_branding_themes(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.BrandingThemes.t()} | {:error, Tesla.Env.t()}
  def get_branding_themes(connection, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/BrandingThemes")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BrandingThemes{}}
    ])
  end

  @doc """
  Retrieves a specific budget, which includes budget lines

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - budget_id (String.t): Unique identifier for Budgets
  - opts (KeywordList): [optional] Optional parameters
    - :date_to (Date.t): Filter by start date
    - :date_from (Date.t): Filter by end date
  ## Returns

  {:ok, Xero.Model.Budgets.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_budget(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Budgets.t()} | {:error, Tesla.Env.t()}
  def get_budget(connection, xero_tenant_id, budget_id, opts \\ []) do
    optional_params = %{
      :DateTo => :query,
      :DateFrom => :query
    }

    %{}
    |> method(:get)
    |> url("/Budgets/#{budget_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Budgets{}}
    ])
  end

  @doc """
  Retrieve a list of budgets

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :i_ds ([String.t]): Filter by BudgetID. Allows you to retrieve a specific individual budget.
    - :date_to (Date.t): Filter by start date
    - :date_from (Date.t): Filter by end date
  ## Returns

  {:ok, Xero.Model.Budgets.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_budgets(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Budgets.t()} | {:error, Tesla.Env.t()}
  def get_budgets(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :IDs => :query,
      :DateTo => :query,
      :DateFrom => :query
    }

    %{}
    |> method(:get)
    |> url("/Budgets")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Budgets{}}
    ])
  end

  @doc """
  Retrieves a specific contacts in a Xero organisation using a unique contact Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def get_contact(connection, xero_tenant_id, contact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific contact by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_contact_attachment_by_file_name(
        connection,
        xero_tenant_id,
        contact_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific contact using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_contact_attachment_by_id(
        connection,
        xero_tenant_id,
        contact_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific contact in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_contact_attachments(connection, xero_tenant_id, contact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves a specific contact by contact number in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_number (String.t): This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50).
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_by_contact_number(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def get_contact_by_contact_number(connection, xero_tenant_id, contact_number, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_number}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}}
    ])
  end

  @doc """
  Retrieves CIS settings for a specific contact in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.CisSettings.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_cis_settings(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.CisSettings.t()} | {:error, Tesla.Env.t()}
  def get_contact_cis_settings(connection, xero_tenant_id, contact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_id}/CISSettings")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CisSettings{}}
    ])
  end

  @doc """
  Retrieves a specific contact group by using a unique contact group Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_group_id (String.t): Unique identifier for a Contact Group
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ContactGroups.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_group(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.ContactGroups.t()} | {:error, Tesla.Env.t()}
  def get_contact_group(connection, xero_tenant_id, contact_group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ContactGroups/#{contact_group_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ContactGroups{}}
    ])
  end

  @doc """
  Retrieves the contact Id and name of each contact group

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.ContactGroups.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ContactGroups.t()} | {:error, Tesla.Env.t()}
  def get_contact_groups(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/ContactGroups")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ContactGroups{}}
    ])
  end

  @doc """
  Retrieves history records for a specific contact

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contact_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_contact_history(connection, xero_tenant_id, contact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Contacts/#{contact_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves all contacts in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :i_ds ([String.t]): Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.
    - :page (integer()): e.g. page=1 - Up to 100 contacts will be returned in a single API call.
    - :include_archived (boolean()): e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response
    - :summary_only (boolean()): Use summaryOnly=true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
    - :search_term (String.t): Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields.
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def get_contacts(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :IDs => :query,
      :page => :query,
      :includeArchived => :query,
      :summaryOnly => :query,
      :searchTerm => :query
    }

    %{}
    |> method(:get)
    |> url("/Contacts")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}}
    ])
  end

  @doc """
  Retrieves a specific credit note using a unique credit note Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.CreditNotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_note(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.CreditNotes.t()} | {:error, Tesla.Env.t()}
  def get_credit_note(connection, xero_tenant_id, credit_note_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/CreditNotes/#{credit_note_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CreditNotes{}}
    ])
  end

  @doc """
  Retrieves credit notes as PDF files

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_note_as_pdf(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_credit_note_as_pdf(connection, xero_tenant_id, credit_note_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CreditNotes/#{credit_note_id}/pdf")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment on a specific credit note by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_note_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_credit_note_attachment_by_file_name(
        connection,
        xero_tenant_id,
        credit_note_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/CreditNotes/#{credit_note_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific credit note using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_note_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_credit_note_attachment_by_id(
        connection,
        xero_tenant_id,
        credit_note_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/CreditNotes/#{credit_note_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_note_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_credit_note_attachments(connection, xero_tenant_id, credit_note_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CreditNotes/#{credit_note_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves history records of a specific credit note

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_note_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_credit_note_history(connection, xero_tenant_id, credit_note_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CreditNotes/#{credit_note_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves any credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :page (integer()): e.g. page=1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.CreditNotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_credit_notes(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.CreditNotes.t()} | {:error, Tesla.Env.t()}
  def get_credit_notes(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :page => :query,
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/CreditNotes")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CreditNotes{}}
    ])
  end

  @doc """
  Retrieves currencies for your Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.Currencies.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_currencies(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Currencies.t()} | {:error, Tesla.Env.t()}
  def get_currencies(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/Currencies")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Currencies{}}
    ])
  end

  @doc """
  Retrieves a specific employee used in Xero payrun using a unique employee Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - employee_id (String.t): Unique identifier for a Employee
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Employees.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_employee(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Employees.t()} | {:error, Tesla.Env.t()}
  def get_employee(connection, xero_tenant_id, employee_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Employees/#{employee_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Employees{}}
    ])
  end

  @doc """
  Retrieves employees used in Xero payrun

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.Employees.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_employees(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Employees.t()} | {:error, Tesla.Env.t()}
  def get_employees(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/Employees")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Employees{}}
    ])
  end

  @doc """
  Retrieves a specific expense claim using a unique expense claim Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - expense_claim_id (String.t): Unique identifier for a ExpenseClaim
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ExpenseClaims.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_expense_claim(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.ExpenseClaims.t()} | {:error, Tesla.Env.t()}
  def get_expense_claim(connection, xero_tenant_id, expense_claim_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ExpenseClaims/#{expense_claim_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ExpenseClaims{}}
    ])
  end

  @doc """
  Retrieves history records of a specific expense claim

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - expense_claim_id (String.t): Unique identifier for a ExpenseClaim
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_expense_claim_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_expense_claim_history(connection, xero_tenant_id, expense_claim_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ExpenseClaims/#{expense_claim_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves expense claims

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.ExpenseClaims.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_expense_claims(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ExpenseClaims.t()} | {:error, Tesla.Env.t()}
  def get_expense_claims(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/ExpenseClaims")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ExpenseClaims{}}
    ])
  end

  @doc """
  Retrieves a specific sales invoice or purchase bill using a unique invoice Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Invoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Invoices.t()} | {:error, Tesla.Env.t()}
  def get_invoice(connection, xero_tenant_id, invoice_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Invoices{}}
    ])
  end

  @doc """
  Retrieves invoices or purchase bills as PDF files

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice_as_pdf(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_invoice_as_pdf(connection, xero_tenant_id, invoice_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}/pdf")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves an attachment from a specific invoice or purchase bill by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_invoice_attachment_by_file_name(
        connection,
        xero_tenant_id,
        invoice_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_invoice_attachment_by_id(
        connection,
        xero_tenant_id,
        invoice_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific invoice or purchase bill

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_invoice_attachments(connection, xero_tenant_id, invoice_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves history records for a specific invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_invoice_history(connection, xero_tenant_id, invoice_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves invoice reminder settings

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.InvoiceReminders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoice_reminders(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.InvoiceReminders.t()} | {:error, Tesla.Env.t()}
  def get_invoice_reminders(connection, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/InvoiceReminders/Settings")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.InvoiceReminders{}}
    ])
  end

  @doc """
  Retrieves sales invoices or purchase bills

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :i_ds ([String.t]): Filter by a comma-separated list of InvoicesIDs.
    - :invoice_numbers ([String.t]): Filter by a comma-separated list of InvoiceNumbers.
    - :contact_ids ([String.t]): Filter by a comma-separated list of ContactIDs.
    - :statuses ([String.t]): Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.
    - :page (integer()): e.g. page=1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice
    - :include_archived (boolean()): e.g. includeArchived=true - Invoices with a status of ARCHIVED will be included in the response
    - :created_by_my_app (boolean()): When set to true you'll only retrieve Invoices created by your app
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
    - :summary_only (boolean()): Use summaryOnly=true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
  ## Returns

  {:ok, Xero.Model.Invoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_invoices(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Invoices.t()} | {:error, Tesla.Env.t()}
  def get_invoices(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :IDs => :query,
      :InvoiceNumbers => :query,
      :ContactIDs => :query,
      :Statuses => :query,
      :page => :query,
      :includeArchived => :query,
      :createdByMyApp => :query,
      :unitdp => :query,
      :summaryOnly => :query
    }

    %{}
    |> method(:get)
    |> url("/Invoices")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Invoices{}}
    ])
  end

  @doc """
  Retrieves a specific item using a unique item Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - item_id (String.t): Unique identifier for an Item
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Items.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_item(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Items.t()} | {:error, Tesla.Env.t()}
  def get_item(connection, xero_tenant_id, item_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Items/#{item_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Items{}}
    ])
  end

  @doc """
  Retrieves history for a specific item

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - item_id (String.t): Unique identifier for an Item
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_item_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_item_history(connection, xero_tenant_id, item_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Items/#{item_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves items

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Items.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_items(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Items.t()} | {:error, Tesla.Env.t()}
  def get_items(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Items")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Items{}}
    ])
  end

  @doc """
  Retrieves a specific journal using a unique journal Id.

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - journal_id (String.t): Unique identifier for a Journal
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Journals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_journal(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Journals.t()} | {:error, Tesla.Env.t()}
  def get_journal(connection, xero_tenant_id, journal_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Journals/#{journal_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Journals{}}
    ])
  end

  @doc """
  Retrieves journals

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :offset (integer()): Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned
    - :payments_only (boolean()): Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.
  ## Returns

  {:ok, Xero.Model.Journals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_journals(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Journals.t()} | {:error, Tesla.Env.t()}
  def get_journals(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :offset => :query,
      :paymentsOnly => :query
    }

    %{}
    |> method(:get)
    |> url("/Journals")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Journals{}}
    ])
  end

  @doc """
  Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - linked_transaction_id (String.t): Unique identifier for a LinkedTransaction
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.LinkedTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_linked_transaction(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.LinkedTransactions.t()} | {:error, Tesla.Env.t()}
  def get_linked_transaction(connection, xero_tenant_id, linked_transaction_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/LinkedTransactions/#{linked_transaction_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.LinkedTransactions{}}
    ])
  end

  @doc """
  Retrieves linked transactions (billable expenses)

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page=1.
    - :linked_transaction_id (String.t): The Xero identifier for an Linked Transaction
    - :source_transaction_id (String.t): Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice
    - :contact_id (String.t): Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.
    - :status (String.t): Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status
    - :target_transaction_id (String.t): Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice
  ## Returns

  {:ok, Xero.Model.LinkedTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_linked_transactions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.LinkedTransactions.t()} | {:error, Tesla.Env.t()}
  def get_linked_transactions(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :LinkedTransactionID => :query,
      :SourceTransactionID => :query,
      :ContactID => :query,
      :Status => :query,
      :TargetTransactionID => :query
    }

    %{}
    |> method(:get)
    |> url("/LinkedTransactions")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.LinkedTransactions{}}
    ])
  end

  @doc """
  Retrieves a specific manual journal

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ManualJournals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_manual_journal(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.ManualJournals.t()} | {:error, Tesla.Env.t()}
  def get_manual_journal(connection, xero_tenant_id, manual_journal_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ManualJournals/#{manual_journal_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ManualJournals{}}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific manual journal by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_manual_journal_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_manual_journal_attachment_by_file_name(
        connection,
        xero_tenant_id,
        manual_journal_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/ManualJournals/#{manual_journal_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_manual_journal_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_manual_journal_attachment_by_id(
        connection,
        xero_tenant_id,
        manual_journal_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/ManualJournals/#{manual_journal_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachment for a specific manual journal

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_manual_journal_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_manual_journal_attachments(connection, xero_tenant_id, manual_journal_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ManualJournals/#{manual_journal_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves manual journals

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :page (integer()): e.g. page=1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment
  ## Returns

  {:ok, Xero.Model.ManualJournals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_manual_journals(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ManualJournals.t()} | {:error, Tesla.Env.t()}
  def get_manual_journals(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/ManualJournals")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ManualJournals{}}
    ])
  end

  @doc """
  Retrieves history for a specific manual journal

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_manual_journals_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_manual_journals_history(connection, xero_tenant_id, manual_journal_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ManualJournals/#{manual_journal_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves a URL to an online invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.OnlineInvoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_online_invoice(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.OnlineInvoices.t()} | {:error, Tesla.Env.t()}
  def get_online_invoice(connection, xero_tenant_id, invoice_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Invoices/#{invoice_id}/OnlineInvoice")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.OnlineInvoices{}}
    ])
  end

  @doc """
  Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Actions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_organisation_actions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Actions.t()} | {:error, Tesla.Env.t()}
  def get_organisation_actions(connection, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Organisation/Actions")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Actions{}}
    ])
  end

  @doc """
  Retrieves the CIS settings for the Xero organistaion.

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - organisation_id (String.t): The unique Xero identifier for an organisation
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.CisOrgSettings.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_organisation_cis_settings(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.CisOrgSettings.t()} | {:error, Tesla.Env.t()}
  def get_organisation_cis_settings(connection, xero_tenant_id, organisation_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Organisation/#{organisation_id}/CISSettings")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CisOrgSettings{}}
    ])
  end

  @doc """
  Retrieves Xero organisation details

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Organisations.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_organisations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Organisations.t()} | {:error, Tesla.Env.t()}
  def get_organisations(connection, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Organisation")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Organisations{}}
    ])
  end

  @doc """
  Retrieves a specific overpayment using a unique overpayment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - overpayment_id (String.t): Unique identifier for a Overpayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Overpayments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_overpayment(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Overpayments.t()} | {:error, Tesla.Env.t()}
  def get_overpayment(connection, xero_tenant_id, overpayment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Overpayments/#{overpayment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Overpayments{}}
    ])
  end

  @doc """
  Retrieves history records of a specific overpayment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - overpayment_id (String.t): Unique identifier for a Overpayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_overpayment_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_overpayment_history(connection, xero_tenant_id, overpayment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Overpayments/#{overpayment_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves overpayments

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :page (integer()): e.g. page=1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Overpayments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_overpayments(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Overpayments.t()} | {:error, Tesla.Env.t()}
  def get_overpayments(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :page => :query,
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Overpayments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Overpayments{}}
    ])
  end

  @doc """
  Retrieves a specific payment for invoices and credit notes using a unique payment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - payment_id (String.t): Unique identifier for a Payment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Payments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payment(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Payments.t()} | {:error, Tesla.Env.t()}
  def get_payment(connection, xero_tenant_id, payment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Payments/#{payment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Payments{}}
    ])
  end

  @doc """
  Retrieves history records of a specific payment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - payment_id (String.t): Unique identifier for a Payment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payment_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_payment_history(connection, xero_tenant_id, payment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Payments/#{payment_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves payment services

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PaymentServices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payment_services(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.PaymentServices.t()} | {:error, Tesla.Env.t()}
  def get_payment_services(connection, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/PaymentServices")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PaymentServices{}}
    ])
  end

  @doc """
  Retrieves payments for invoices and credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :page (integer()): Up to 100 payments will be returned in a single API call
  ## Returns

  {:ok, Xero.Model.Payments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payments(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Payments.t()} | {:error, Tesla.Env.t()}
  def get_payments(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/Payments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Payments{}}
    ])
  end

  @doc """
  Allows you to retrieve a specified prepayments

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - prepayment_id (String.t): Unique identifier for a PrePayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Prepayments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_prepayment(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Prepayments.t()} | {:error, Tesla.Env.t()}
  def get_prepayment(connection, xero_tenant_id, prepayment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Prepayments/#{prepayment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Prepayments{}}
    ])
  end

  @doc """
  Retrieves history record for a specific prepayment

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - prepayment_id (String.t): Unique identifier for a PrePayment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_prepayment_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_prepayment_history(connection, xero_tenant_id, prepayment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Prepayments/#{prepayment_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves prepayments

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :page (integer()): e.g. page=1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Prepayments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_prepayments(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Prepayments.t()} | {:error, Tesla.Env.t()}
  def get_prepayments(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :page => :query,
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Prepayments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Prepayments{}}
    ])
  end

  @doc """
  Retrieves a specific purchase order using a unique purchase order Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PurchaseOrders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.PurchaseOrders.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order(connection, xero_tenant_id, purchase_order_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PurchaseOrders{}}
    ])
  end

  @doc """
  Retrieves specific purchase order as PDF files using a unique purchase order Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order_as_pdf(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order_as_pdf(connection, xero_tenant_id, purchase_order_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_id}/pdf")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment for a specific purchase order by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order_attachment_by_file_name(
        connection,
        xero_tenant_id,
        purchase_order_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves specific attachment for a specific purchase order using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order_attachment_by_id(
        connection,
        xero_tenant_id,
        purchase_order_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific purchase order

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order_attachments(connection, xero_tenant_id, purchase_order_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves a specific purchase order using purchase order number

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_number (String.t): Unique identifier for a PurchaseOrder
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PurchaseOrders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order_by_number(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.PurchaseOrders.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order_by_number(connection, xero_tenant_id, purchase_order_number, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_number}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PurchaseOrders{}}
    ])
  end

  @doc """
  Retrieves history for a specific purchase order

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_order_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_purchase_order_history(connection, xero_tenant_id, purchase_order_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/PurchaseOrders/#{purchase_order_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves purchase orders

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :status (String.t): Filter by purchase order status
    - :date_from (String.t): Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
    - :date_to (String.t): Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
    - :order (String.t): Order by an any element
    - :page (integer()): To specify a page, append the page parameter to the URL e.g. ?page=1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page=2 and continuing this process until no more results are returned.
  ## Returns

  {:ok, Xero.Model.PurchaseOrders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_purchase_orders(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.PurchaseOrders.t()} | {:error, Tesla.Env.t()}
  def get_purchase_orders(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :Status => :query,
      :DateFrom => :query,
      :DateTo => :query,
      :order => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/PurchaseOrders")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PurchaseOrders{}}
    ])
  end

  @doc """
  Retrieves a specific quote using a unique quote Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Quotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quote(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Quotes.t()} | {:error, Tesla.Env.t()}
  def get_quote(connection, xero_tenant_id, quote_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Quotes/#{quote_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Quotes{}}
    ])
  end

  @doc """
  Retrieves a specific quote as a PDF file using a unique quote Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quote_as_pdf(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_quote_as_pdf(connection, xero_tenant_id, quote_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Quotes/#{quote_id}/pdf")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific quote by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quote_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_quote_attachment_by_file_name(
        connection,
        xero_tenant_id,
        quote_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Quotes/#{quote_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific quote using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quote_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_quote_attachment_by_id(
        connection,
        xero_tenant_id,
        quote_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Quotes/#{quote_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific quote

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quote_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_quote_attachments(connection, xero_tenant_id, quote_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Quotes/#{quote_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves history records of a specific quote

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quote_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_quote_history(connection, xero_tenant_id, quote_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Quotes/#{quote_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves sales quotes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :date_from (Date.t): Filter for quotes after a particular date
    - :date_to (Date.t): Filter for quotes before a particular date
    - :expiry_date_from (Date.t): Filter for quotes expiring after a particular date
    - :expiry_date_to (Date.t): Filter for quotes before a particular date
    - :contact_id (String.t): Filter for quotes belonging to a particular contact
    - :status (String.t): Filter for quotes of a particular Status
    - :page (integer()): e.g. page=1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote
    - :order (String.t): Order by an any element
    - :quote_number (String.t): Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber=QU-0001)
  ## Returns

  {:ok, Xero.Model.Quotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quotes(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Quotes.t()} | {:error, Tesla.Env.t()}
  def get_quotes(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :DateFrom => :query,
      :DateTo => :query,
      :ExpiryDateFrom => :query,
      :ExpiryDateTo => :query,
      :ContactID => :query,
      :Status => :query,
      :page => :query,
      :order => :query,
      :QuoteNumber => :query
    }

    %{}
    |> method(:get)
    |> url("/Quotes")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Quotes{}}
    ])
  end

  @doc """
  Retrieves a specific draft expense claim receipt by using a unique receipt Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Receipts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_receipt(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Receipts.t()} | {:error, Tesla.Env.t()}
  def get_receipt(connection, xero_tenant_id, receipt_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Receipts/#{receipt_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Receipts{}}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific expense claim receipts by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_receipt_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_receipt_attachment_by_file_name(
        connection,
        xero_tenant_id,
        receipt_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Receipts/#{receipt_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_receipt_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_receipt_attachment_by_id(
        connection,
        xero_tenant_id,
        receipt_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/Receipts/#{receipt_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments for a specific expense claim receipt

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_receipt_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_receipt_attachments(connection, xero_tenant_id, receipt_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Receipts/#{receipt_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves a history record for a specific receipt

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_receipt_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_receipt_history(connection, xero_tenant_id, receipt_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Receipts/#{receipt_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves draft expense claim receipts for any user

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Receipts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_receipts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Receipts.t()} | {:error, Tesla.Env.t()}
  def get_receipts(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query,
      :unitdp => :query
    }

    %{}
    |> method(:get)
    |> url("/Receipts")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Receipts{}}
    ])
  end

  @doc """
  Retrieves a specific repeating invoice by using a unique repeating invoice Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.RepeatingInvoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_repeating_invoice(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.RepeatingInvoices.t()} | {:error, Tesla.Env.t()}
  def get_repeating_invoice(connection, xero_tenant_id, repeating_invoice_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.RepeatingInvoices{}}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific repeating invoices by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - file_name (String.t): Name of the attachment
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_repeating_invoice_attachment_by_file_name(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_repeating_invoice_attachment_by_file_name(
        connection,
        xero_tenant_id,
        repeating_invoice_id,
        file_name,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/Attachments/#{file_name}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves a specific attachment from a specific repeating invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - attachment_id (String.t): Unique identifier for Attachment object
  - content_type (String.t): The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_repeating_invoice_attachment_by_id(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def get_repeating_invoice_attachment_by_id(
        connection,
        xero_tenant_id,
        repeating_invoice_id,
        attachment_id,
        content_type,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/Attachments/#{attachment_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:headers, :contentType, content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieves attachments from a specific repeating invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_repeating_invoice_attachments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Attachments.t()} | {:error, Tesla.Env.t()}
  def get_repeating_invoice_attachments(
        connection,
        xero_tenant_id,
        repeating_invoice_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/Attachments")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}}
    ])
  end

  @doc """
  Retrieves history record for a specific repeating invoice

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.HistoryRecords.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_repeating_invoice_history(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.HistoryRecords.t()} | {:error, Tesla.Env.t()}
  def get_repeating_invoice_history(connection, xero_tenant_id, repeating_invoice_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/History")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.HistoryRecords{}}
    ])
  end

  @doc """
  Retrieves repeating invoices

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.RepeatingInvoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_repeating_invoices(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.RepeatingInvoices.t()} | {:error, Tesla.Env.t()}
  def get_repeating_invoices(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/RepeatingInvoices")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.RepeatingInvoices{}}
    ])
  end

  @doc """
  Retrieves report for aged payables by contact

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
    - :date (Date.t): The date of the Aged Payables By Contact report
    - :from_date (Date.t): filter by the from date of the report e.g. 2021-02-01
    - :to_date (Date.t): filter by the to date of the report e.g. 2021-02-28
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_aged_payables_by_contact(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_aged_payables_by_contact(connection, xero_tenant_id, contact_id, opts \\ []) do
    optional_params = %{
      :date => :query,
      :fromDate => :query,
      :toDate => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/AgedPayablesByContact")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:query, :contactId, contact_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves report for aged receivables by contact

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
    - :date (Date.t): The date of the Aged Receivables By Contact report
    - :from_date (Date.t): filter by the from date of the report e.g. 2021-02-01
    - :to_date (Date.t): filter by the to date of the report e.g. 2021-02-28
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_aged_receivables_by_contact(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_aged_receivables_by_contact(connection, xero_tenant_id, contact_id, opts \\ []) do
    optional_params = %{
      :date => :query,
      :fromDate => :query,
      :toDate => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/AgedReceivablesByContact")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_param(:query, :contactId, contact_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves report for balancesheet

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :date (Date.t): The date of the Balance Sheet report
    - :periods (integer()): The number of periods for the Balance Sheet report
    - :timeframe (String.t): The period size to compare to (MONTH, QUARTER, YEAR)
    - :tracking_option_id1 (String.t): The tracking option 1 for the Balance Sheet report
    - :tracking_option_id2 (String.t): The tracking option 2 for the Balance Sheet report
    - :standard_layout (boolean()): The standard layout boolean for the Balance Sheet report
    - :payments_only (boolean()): return a cash basis for the Balance Sheet report
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_balance_sheet(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_balance_sheet(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :date => :query,
      :periods => :query,
      :timeframe => :query,
      :trackingOptionID1 => :query,
      :trackingOptionID2 => :query,
      :standardLayout => :query,
      :paymentsOnly => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/BalanceSheet")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves report for bank summary

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :from_date (Date.t): filter by the from date of the report e.g. 2021-02-01
    - :to_date (Date.t): filter by the to date of the report e.g. 2021-02-28
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_bank_summary(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_bank_summary(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :fromDate => :query,
      :toDate => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/BankSummary")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves report for budget summary

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :date (Date.t): The date for the Bank Summary report e.g. 2018-03-31
    - :periods (integer()): The number of periods to compare (integer between 1 and 12)
    - :timeframe (integer()): The period size to compare to (1=month, 3=quarter, 12=year)
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_budget_summary(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_budget_summary(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :date => :query,
      :periods => :query,
      :timeframe => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/BudgetSummary")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves report for executive summary

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :date (Date.t): The date for the Bank Summary report e.g. 2018-03-31
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_executive_summary(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_executive_summary(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :date => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/ExecutiveSummary")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves a specific report using a unique ReportID

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - report_id (String.t): Unique identifier for a Report
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_from_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_from_id(connection, xero_tenant_id, report_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Reports/#{report_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves report for profit and loss

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :from_date (Date.t): filter by the from date of the report e.g. 2021-02-01
    - :to_date (Date.t): filter by the to date of the report e.g. 2021-02-28
    - :periods (integer()): The number of periods to compare (integer between 1 and 12)
    - :timeframe (String.t): The period size to compare to (MONTH, QUARTER, YEAR)
    - :tracking_category_id (String.t): The trackingCategory 1 for the ProfitAndLoss report
    - :tracking_category_id2 (String.t): The trackingCategory 2 for the ProfitAndLoss report
    - :tracking_option_id (String.t): The tracking option 1 for the ProfitAndLoss report
    - :tracking_option_id2 (String.t): The tracking option 2 for the ProfitAndLoss report
    - :standard_layout (boolean()): Return the standard layout for the ProfitAndLoss report
    - :payments_only (boolean()): Return cash only basis for the ProfitAndLoss report
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_profit_and_loss(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_profit_and_loss(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :fromDate => :query,
      :toDate => :query,
      :periods => :query,
      :timeframe => :query,
      :trackingCategoryID => :query,
      :trackingCategoryID2 => :query,
      :trackingOptionID => :query,
      :trackingOptionID2 => :query,
      :standardLayout => :query,
      :paymentsOnly => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/ProfitAndLoss")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieve reports for 1099

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :report_year (String.t): The year of the 1099 report
  ## Returns

  {:ok, Xero.Model.Reports.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_ten_ninety_nine(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Reports.t()} | {:error, Tesla.Env.t()}
  def get_report_ten_ninety_nine(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :reportYear => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/TenNinetyNine")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Reports{}}
    ])
  end

  @doc """
  Retrieves report for trial balance

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :date (Date.t): The date for the Trial Balance report e.g. 2018-03-31
    - :payments_only (boolean()): Return cash only basis for the Trial Balance report
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_report_trial_balance(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_report_trial_balance(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :date => :query,
      :paymentsOnly => :query
    }

    %{}
    |> method(:get)
    |> url("/Reports/TrialBalance")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves a list of the organistaions unique reports that require a uuid to fetch

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ReportWithRows.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_reports_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.ReportWithRows.t()} | {:error, Tesla.Env.t()}
  def get_reports_list(connection, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Reports")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ReportWithRows{}}
    ])
  end

  @doc """
  Retrieves tax rates

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :tax_type (String.t): Filter by tax type
  ## Returns

  {:ok, Xero.Model.TaxRates.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_tax_rates(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.TaxRates.t()} | {:error, Tesla.Env.t()}
  def get_tax_rates(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :where => :query,
      :order => :query,
      :TaxType => :query
    }

    %{}
    |> method(:get)
    |> url("/TaxRates")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TaxRates{}}
    ])
  end

  @doc """
  Retrieves tracking categories and options

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
    - :include_archived (boolean()): e.g. includeArchived=true - Categories and options with a status of ARCHIVED will be included in the response
  ## Returns

  {:ok, Xero.Model.TrackingCategories.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_tracking_categories(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.TrackingCategories.t()} | {:error, Tesla.Env.t()}
  def get_tracking_categories(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :where => :query,
      :order => :query,
      :includeArchived => :query
    }

    %{}
    |> method(:get)
    |> url("/TrackingCategories")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingCategories{}}
    ])
  end

  @doc """
  Retrieves specific tracking categories and options using a unique tracking category Id

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - tracking_category_id (String.t): Unique identifier for a TrackingCategory
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingCategories.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_tracking_category(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.TrackingCategories.t()} | {:error, Tesla.Env.t()}
  def get_tracking_category(connection, xero_tenant_id, tracking_category_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/TrackingCategories/#{tracking_category_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingCategories{}}
    ])
  end

  @doc """
  Retrieves a specific user

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - user_id (String.t): Unique identifier for a User
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Users.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Users.t()} | {:error, Tesla.Env.t()}
  def get_user(connection, xero_tenant_id, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Users/#{user_id}")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Users{}}
    ])
  end

  @doc """
  Retrieves users

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :if_modified_since (DateTime.t): Only records created or modified since this timestamp will be returned
    - :where (String.t): Filter by an any element
    - :order (String.t): Order by an any element
  ## Returns

  {:ok, Xero.Model.Users.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_users(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Xero.Model.Users.t()} | {:error, Tesla.Env.t()}
  def get_users(connection, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :"If-Modified-Since" => :headers,
      :where => :query,
      :order => :query
    }

    %{}
    |> method(:get)
    |> url("/Users")
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Users{}}
    ])
  end

  @doc """
  Sets the chart of accounts, the conversion date and conversion balances

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - setup (Setup): Object including an accounts array, a conversion balances array and a conversion date object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ImportSummaryObject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_setup(Tesla.Env.client(), Xero.Model.Setup.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.ImportSummaryObject.t()} | {:error, Tesla.Env.t()}
  def post_setup(connection, setup, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Setup")
    |> add_param(:body, :body, setup)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ImportSummaryObject{}}
    ])
  end

  @doc """
  Updates a chart of accounts

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - accounts (Accounts): Request of type Accounts array with one Account
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Accounts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_account(
          Tesla.Env.client(),
          Xero.Model.Accounts.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Accounts.t()} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def update_account(connection, accounts, xero_tenant_id, account_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Accounts/#{account_id}")
    |> add_param(:body, :body, accounts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Accounts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates attachment on a specific account by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - account_id (String.t): Unique identifier for Account object
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_account_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_account_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        account_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/Accounts/#{account_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a single spent or received money transaction

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - bank_transactions (BankTransactions):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.BankTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_bank_transaction(
          Tesla.Env.client(),
          Xero.Model.BankTransactions.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.BankTransactions.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_bank_transaction(
        connection,
        bank_transactions,
        xero_tenant_id,
        bank_transaction_id,
        opts \\ []
      ) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/BankTransactions/#{bank_transaction_id}")
    |> add_param(:body, :body, bank_transactions)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransactions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific attachment from a specific bank transaction by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transaction_id (String.t): Xero generated unique identifier for a bank transaction
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_bank_transaction_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_bank_transaction_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        bank_transaction_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/BankTransactions/#{bank_transaction_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - bank_transfer_id (String.t): Xero generated unique identifier for a bank transfer
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_bank_transfer_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_bank_transfer_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        bank_transfer_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/BankTransfers/#{bank_transfer_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific contact in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - contacts (Contacts): an array of Contacts containing single Contact object with properties to update
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_contact(
          Tesla.Env.client(),
          Xero.Model.Contacts.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def update_contact(connection, contacts, xero_tenant_id, contact_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Contacts/#{contact_id}")
    |> add_param(:body, :body, contacts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_id (String.t): Unique identifier for a Contact
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_contact_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_contact_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        contact_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/Contacts/#{contact_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific contact group

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - contact_groups (ContactGroups): an array of Contact groups with Name of specific group to update
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - contact_group_id (String.t): Unique identifier for a Contact Group
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ContactGroups.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_contact_group(
          Tesla.Env.client(),
          Xero.Model.ContactGroups.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.ContactGroups.t()}
          | {:error, Tesla.Env.t()}
  def update_contact_group(
        connection,
        contact_groups,
        xero_tenant_id,
        contact_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/ContactGroups/#{contact_group_id}")
    |> add_param(:body, :body, contact_groups)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ContactGroups{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific credit note

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - credit_notes (CreditNotes): an array of Credit Notes containing credit note details to update
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.CreditNotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_credit_note(
          Tesla.Env.client(),
          Xero.Model.CreditNotes.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.CreditNotes.t()}
          | {:error, Tesla.Env.t()}
  def update_credit_note(connection, credit_notes, xero_tenant_id, credit_note_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/CreditNotes/#{credit_note_id}")
    |> add_param(:body, :body, credit_notes)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CreditNotes{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates attachments on a specific credit note by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - credit_note_id (String.t): Unique identifier for a Credit Note
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_credit_note_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_credit_note_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        credit_note_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/CreditNotes/#{credit_note_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific expense claims

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - expense_claims (ExpenseClaims):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - expense_claim_id (String.t): Unique identifier for a ExpenseClaim
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ExpenseClaims.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_expense_claim(
          Tesla.Env.client(),
          Xero.Model.ExpenseClaims.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.ExpenseClaims.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_expense_claim(
        connection,
        expense_claims,
        xero_tenant_id,
        expense_claim_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/ExpenseClaims/#{expense_claim_id}")
    |> add_param(:body, :body, expense_claims)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ExpenseClaims{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific sales invoices or purchase bills

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - invoices (Invoices):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Invoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_invoice(
          Tesla.Env.client(),
          Xero.Model.Invoices.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Invoices.t()} | {:error, Tesla.Env.t()}
  def update_invoice(connection, invoices, xero_tenant_id, invoice_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/Invoices/#{invoice_id}")
    |> add_param(:body, :body, invoices)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Invoices{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates an attachment from a specific invoices or purchase bill by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - invoice_id (String.t): Unique identifier for an Invoice
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_invoice_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_invoice_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        invoice_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/Invoices/#{invoice_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific item

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - items (Items):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - item_id (String.t): Unique identifier for an Item
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Items.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_item(Tesla.Env.client(), Xero.Model.Items.t(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Items.t()} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def update_item(connection, items, xero_tenant_id, item_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/Items/#{item_id}")
    |> add_param(:body, :body, items)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Items{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific linked transactions (billable expenses)

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - linked_transactions (LinkedTransactions):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - linked_transaction_id (String.t): Unique identifier for a LinkedTransaction
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.LinkedTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_linked_transaction(
          Tesla.Env.client(),
          Xero.Model.LinkedTransactions.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.LinkedTransactions.t()}
          | {:error, Tesla.Env.t()}
  def update_linked_transaction(
        connection,
        linked_transactions,
        xero_tenant_id,
        linked_transaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/LinkedTransactions/#{linked_transaction_id}")
    |> add_param(:body, :body, linked_transactions)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.LinkedTransactions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific manual journal

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - manual_journals (ManualJournals):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.ManualJournals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_manual_journal(
          Tesla.Env.client(),
          Xero.Model.ManualJournals.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.ManualJournals.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_manual_journal(
        connection,
        manual_journals,
        xero_tenant_id,
        manual_journal_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/ManualJournals/#{manual_journal_id}")
    |> add_param(:body, :body, manual_journals)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ManualJournals{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific attachment from a specific manual journal by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - manual_journal_id (String.t): Unique identifier for a ManualJournal
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_manual_journal_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_manual_journal_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        manual_journal_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/ManualJournals/#{manual_journal_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more spent or received money transaction

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - bank_transactions (BankTransactions):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.BankTransactions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_bank_transactions(
          Tesla.Env.client(),
          Xero.Model.BankTransactions.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.BankTransactions.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_or_create_bank_transactions(
        connection,
        bank_transactions,
        xero_tenant_id,
        opts \\ []
      ) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/BankTransactions")
    |> add_param(:body, :body, bank_transactions)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.BankTransactions{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more contacts in a Xero organisation

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - contacts (Contacts):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Contacts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_contacts(
          Tesla.Env.client(),
          Xero.Model.Contacts.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Contacts.t()} | {:error, Tesla.Env.t()}
  def update_or_create_contacts(connection, contacts, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:post)
    |> url("/Contacts")
    |> add_param(:body, :body, contacts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Contacts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more credit notes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - credit_notes (CreditNotes): an array of Credit Notes with a single CreditNote object.
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.CreditNotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_credit_notes(
          Tesla.Env.client(),
          Xero.Model.CreditNotes.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.CreditNotes.t()}
          | {:error, Tesla.Env.t()}
  def update_or_create_credit_notes(connection, credit_notes, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/CreditNotes")
    |> add_param(:body, :body, credit_notes)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.CreditNotes{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Creates a single new employees used in Xero payrun

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - employees (Employees): Employees with array of Employee object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Employees.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_employees(
          Tesla.Env.client(),
          Xero.Model.Employees.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Employees.t()} | {:error, Tesla.Env.t()}
  def update_or_create_employees(connection, employees, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:post)
    |> url("/Employees")
    |> add_param(:body, :body, employees)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Employees{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more sales invoices or purchase bills

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - invoices (Invoices):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Invoices.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_invoices(
          Tesla.Env.client(),
          Xero.Model.Invoices.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Invoices.t()} | {:error, Tesla.Env.t()}
  def update_or_create_invoices(connection, invoices, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/Invoices")
    |> add_param(:body, :body, invoices)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Invoices{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more items

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - items (Items):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Items.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_items(Tesla.Env.client(), Xero.Model.Items.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Items.t()} | {:ok, Xero.Model.Error.t()} | {:error, Tesla.Env.t()}
  def update_or_create_items(connection, items, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query,
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/Items")
    |> add_param(:body, :body, items)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Items{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates a single manual journal

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - manual_journals (ManualJournals): ManualJournals array with ManualJournal object in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.ManualJournals.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_manual_journals(
          Tesla.Env.client(),
          Xero.Model.ManualJournals.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.ManualJournals.t()}
          | {:ok, Xero.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_or_create_manual_journals(connection, manual_journals, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:post)
    |> url("/ManualJournals")
    |> add_param(:body, :body, manual_journals)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.ManualJournals{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more purchase orders

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - purchase_orders (PurchaseOrders):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.PurchaseOrders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_purchase_orders(
          Tesla.Env.client(),
          Xero.Model.PurchaseOrders.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.PurchaseOrders.t()}
          | {:error, Tesla.Env.t()}
  def update_or_create_purchase_orders(connection, purchase_orders, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:post)
    |> url("/PurchaseOrders")
    |> add_param(:body, :body, purchase_orders)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PurchaseOrders{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates or creates one or more quotes

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - quotes (Quotes):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
    - :summarize_errors (boolean()): If false return 200 OK and mix of successfully created objects and any with validation errors
  ## Returns

  {:ok, Xero.Model.Quotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_or_create_quotes(Tesla.Env.client(), Xero.Model.Quotes.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Quotes.t()} | {:error, Tesla.Env.t()}
  def update_or_create_quotes(connection, quotes, xero_tenant_id, opts \\ []) do
    optional_params = %{
      :summarizeErrors => :query
    }

    %{}
    |> method(:post)
    |> url("/Quotes")
    |> add_param(:body, :body, quotes)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Quotes{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific purchase order

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - purchase_orders (PurchaseOrders):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.PurchaseOrders.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_purchase_order(
          Tesla.Env.client(),
          Xero.Model.PurchaseOrders.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.PurchaseOrders.t()}
          | {:error, Tesla.Env.t()}
  def update_purchase_order(
        connection,
        purchase_orders,
        xero_tenant_id,
        purchase_order_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/PurchaseOrders/#{purchase_order_id}")
    |> add_param(:body, :body, purchase_orders)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.PurchaseOrders{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific attachment for a specific purchase order by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - purchase_order_id (String.t): Unique identifier for an Purchase Order
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_purchase_order_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_purchase_order_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        purchase_order_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/PurchaseOrders/#{purchase_order_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific quote

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - quotes (Quotes):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Quotes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_quote(Tesla.Env.client(), Xero.Model.Quotes.t(), String.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Quotes.t()} | {:error, Tesla.Env.t()}
  def update_quote(connection, quotes, xero_tenant_id, quote_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Quotes/#{quote_id}")
    |> add_param(:body, :body, quotes)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Quotes{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific attachment from a specific quote by filename

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - quote_id (String.t): Unique identifier for an Quote
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_quote_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_quote_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        quote_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/Quotes/#{quote_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific draft expense claim receipts

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - receipts (Receipts):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - opts (KeywordList): [optional] Optional parameters
    - :unitdp (integer()): e.g. unitdp=4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  ## Returns

  {:ok, Xero.Model.Receipts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_receipt(
          Tesla.Env.client(),
          Xero.Model.Receipts.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.Receipts.t()} | {:error, Tesla.Env.t()}
  def update_receipt(connection, receipts, xero_tenant_id, receipt_id, opts \\ []) do
    optional_params = %{
      :unitdp => :query
    }

    %{}
    |> method(:post)
    |> url("/Receipts/#{receipt_id}")
    |> add_param(:body, :body, receipts)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Receipts{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific attachment on a specific expense claim receipts by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - receipt_id (String.t): Unique identifier for a Receipt
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_receipt_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_receipt_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        receipt_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/Receipts/#{receipt_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific attachment from a specific repeating invoices by file name

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - body (binary()): Byte array of file in body of request
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - repeating_invoice_id (String.t): Unique identifier for a Repeating Invoice
  - file_name (String.t): Name of the attachment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.Attachments.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_repeating_invoice_attachment_by_file_name(
          Tesla.Env.client(),
          binary(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.Attachments.t()}
          | {:error, Tesla.Env.t()}
  def update_repeating_invoice_attachment_by_file_name(
        connection,
        body,
        xero_tenant_id,
        repeating_invoice_id,
        file_name,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/RepeatingInvoices/#{repeating_invoice_id}/Attachments/#{file_name}")
    |> add_param(:body, :body, body)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.Attachments{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates tax rates

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - tax_rates (TaxRates):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TaxRates.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_tax_rate(Tesla.Env.client(), Xero.Model.TaxRates.t(), String.t(), keyword()) ::
          {:ok, Xero.Model.Error.t()} | {:ok, Xero.Model.TaxRates.t()} | {:error, Tesla.Env.t()}
  def update_tax_rate(connection, tax_rates, xero_tenant_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/TaxRates")
    |> add_param(:body, :body, tax_rates)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TaxRates{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific tracking category

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - tracking_category (TrackingCategory):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - tracking_category_id (String.t): Unique identifier for a TrackingCategory
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingCategories.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_tracking_category(
          Tesla.Env.client(),
          Xero.Model.TrackingCategory.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.TrackingCategories.t()}
          | {:error, Tesla.Env.t()}
  def update_tracking_category(
        connection,
        tracking_category,
        xero_tenant_id,
        tracking_category_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/TrackingCategories/#{tracking_category_id}")
    |> add_param(:body, :body, tracking_category)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingCategories{}},
      {400, %Xero.Model.Error{}}
    ])
  end

  @doc """
  Updates a specific option for a specific tracking category

  ## Parameters

  - connection (Xero.Connection): Connection to server
  - tracking_option (TrackingOption):
  - xero_tenant_id (String.t): Xero identifier for Tenant
  - tracking_category_id (String.t): Unique identifier for a TrackingCategory
  - tracking_option_id (String.t): Unique identifier for a Tracking Option
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Xero.Model.TrackingOptions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_tracking_options(
          Tesla.Env.client(),
          Xero.Model.TrackingOption.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Xero.Model.Error.t()}
          | {:ok, Xero.Model.TrackingOptions.t()}
          | {:error, Tesla.Env.t()}
  def update_tracking_options(
        connection,
        tracking_option,
        xero_tenant_id,
        tracking_category_id,
        tracking_option_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/TrackingCategories/#{tracking_category_id}/Options/#{tracking_option_id}")
    |> add_param(:body, :body, tracking_option)
    |> add_param(:headers, :"xero-tenant-id", xero_tenant_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Xero.Model.TrackingOptions{}},
      {400, %Xero.Model.Error{}}
    ])
  end
end
