# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Model.Contact do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :ContactID,
    :ContactNumber,
    :AccountNumber,
    :ContactStatus,
    :Name,
    :FirstName,
    :LastName,
    :EmailAddress,
    :SkypeUserName,
    :ContactPersons,
    :BankAccountDetails,
    :TaxNumber,
    :AccountsReceivableTaxType,
    :AccountsPayableTaxType,
    :Addresses,
    :Phones,
    :IsSupplier,
    :IsCustomer,
    :DefaultCurrency,
    :XeroNetworkKey,
    :SalesDefaultAccountCode,
    :PurchasesDefaultAccountCode,
    :SalesTrackingCategories,
    :PurchasesTrackingCategories,
    :TrackingCategoryName,
    :TrackingCategoryOption,
    :PaymentTerms,
    :UpdatedDateUTC,
    :ContactGroups,
    :Website,
    :BrandingTheme,
    :BatchPayments,
    :Discount,
    :Balances,
    :Attachments,
    :HasAttachments,
    :ValidationErrors,
    :HasValidationErrors,
    :StatusAttributeString
  ]

  @type t :: %__MODULE__{
          :ContactID => String.t() | nil,
          :ContactNumber => String.t() | nil,
          :AccountNumber => String.t() | nil,
          :ContactStatus => String.t() | nil,
          :Name => String.t() | nil,
          :FirstName => String.t() | nil,
          :LastName => String.t() | nil,
          :EmailAddress => String.t() | nil,
          :SkypeUserName => String.t() | nil,
          :ContactPersons => [Xero.Model.ContactPerson.t()] | nil,
          :BankAccountDetails => String.t() | nil,
          :TaxNumber => String.t() | nil,
          :AccountsReceivableTaxType => String.t() | nil,
          :AccountsPayableTaxType => String.t() | nil,
          :Addresses => [Xero.Model.Address.t()] | nil,
          :Phones => [Xero.Model.Phone.t()] | nil,
          :IsSupplier => boolean() | nil,
          :IsCustomer => boolean() | nil,
          :DefaultCurrency => Xero.Model.CurrencyCode.t() | nil,
          :XeroNetworkKey => String.t() | nil,
          :SalesDefaultAccountCode => String.t() | nil,
          :PurchasesDefaultAccountCode => String.t() | nil,
          :SalesTrackingCategories => [Xero.Model.SalesTrackingCategory.t()] | nil,
          :PurchasesTrackingCategories => [Xero.Model.SalesTrackingCategory.t()] | nil,
          :TrackingCategoryName => String.t() | nil,
          :TrackingCategoryOption => String.t() | nil,
          :PaymentTerms => Xero.Model.PaymentTerm.t() | nil,
          :UpdatedDateUTC => String.t() | nil,
          :ContactGroups => [Xero.Model.ContactGroup.t()] | nil,
          :Website => String.t() | nil,
          :BrandingTheme => Xero.Model.BrandingTheme.t() | nil,
          :BatchPayments => Xero.Model.BatchPaymentDetails.t() | nil,
          :Discount => float() | nil,
          :Balances => Xero.Model.Balances.t() | nil,
          :Attachments => [Xero.Model.Attachment.t()] | nil,
          :HasAttachments => boolean() | nil,
          :ValidationErrors => [Xero.Model.ValidationError.t()] | nil,
          :HasValidationErrors => boolean() | nil,
          :StatusAttributeString => String.t() | nil
        }
end

defimpl Poison.Decoder, for: Xero.Model.Contact do
  import Xero.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:ContactPersons, :list, Xero.Model.ContactPerson, options)
    |> deserialize(:Addresses, :list, Xero.Model.Address, options)
    |> deserialize(:Phones, :list, Xero.Model.Phone, options)
    |> deserialize(:DefaultCurrency, :struct, Xero.Model.CurrencyCode, options)
    |> deserialize(:SalesTrackingCategories, :list, Xero.Model.SalesTrackingCategory, options)
    |> deserialize(:PurchasesTrackingCategories, :list, Xero.Model.SalesTrackingCategory, options)
    |> deserialize(:PaymentTerms, :struct, Xero.Model.PaymentTerm, options)
    |> deserialize(:ContactGroups, :list, Xero.Model.ContactGroup, options)
    |> deserialize(:BrandingTheme, :struct, Xero.Model.BrandingTheme, options)
    |> deserialize(:BatchPayments, :struct, Xero.Model.BatchPaymentDetails, options)
    |> deserialize(:Balances, :struct, Xero.Model.Balances, options)
    |> deserialize(:Attachments, :list, Xero.Model.Attachment, options)
    |> deserialize(:ValidationErrors, :list, Xero.Model.ValidationError, options)
  end
end
