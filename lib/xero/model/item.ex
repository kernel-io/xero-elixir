# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Model.Item do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :Code,
    :InventoryAssetAccountCode,
    :Name,
    :IsSold,
    :IsPurchased,
    :Description,
    :PurchaseDescription,
    :PurchaseDetails,
    :SalesDetails,
    :IsTrackedAsInventory,
    :TotalCostPool,
    :QuantityOnHand,
    :UpdatedDateUTC,
    :ItemID,
    :StatusAttributeString,
    :ValidationErrors
  ]

  @type t :: %__MODULE__{
          :Code => String.t(),
          :InventoryAssetAccountCode => String.t() | nil,
          :Name => String.t() | nil,
          :IsSold => boolean() | nil,
          :IsPurchased => boolean() | nil,
          :Description => String.t() | nil,
          :PurchaseDescription => String.t() | nil,
          :PurchaseDetails => Xero.Model.Purchase.t() | nil,
          :SalesDetails => Xero.Model.Purchase.t() | nil,
          :IsTrackedAsInventory => boolean() | nil,
          :TotalCostPool => float() | nil,
          :QuantityOnHand => float() | nil,
          :UpdatedDateUTC => String.t() | nil,
          :ItemID => String.t() | nil,
          :StatusAttributeString => String.t() | nil,
          :ValidationErrors => [Xero.Model.ValidationError.t()] | nil
        }
end

defimpl Poison.Decoder, for: Xero.Model.Item do
  import Xero.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:PurchaseDetails, :struct, Xero.Model.Purchase, options)
    |> deserialize(:SalesDetails, :struct, Xero.Model.Purchase, options)
    |> deserialize(:ValidationErrors, :list, Xero.Model.ValidationError, options)
  end
end
