# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Model.Invoice do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :Type,
    :Contact,
    :LineItems,
    :Date,
    :DueDate,
    :LineAmountTypes,
    :InvoiceNumber,
    :Reference,
    :BrandingThemeID,
    :Url,
    :CurrencyCode,
    :CurrencyRate,
    :Status,
    :SentToContact,
    :ExpectedPaymentDate,
    :PlannedPaymentDate,
    :CISDeduction,
    :CISRate,
    :SubTotal,
    :TotalTax,
    :Total,
    :TotalDiscount,
    :InvoiceID,
    :RepeatingInvoiceID,
    :HasAttachments,
    :IsDiscounted,
    :Payments,
    :Prepayments,
    :Overpayments,
    :AmountDue,
    :AmountPaid,
    :FullyPaidOnDate,
    :AmountCredited,
    :UpdatedDateUTC,
    :CreditNotes,
    :Attachments,
    :HasErrors,
    :StatusAttributeString,
    :ValidationErrors,
    :Warnings
  ]

  @type t :: %__MODULE__{
          :Type => String.t() | nil,
          :Contact => Xero.Model.Contact.t() | nil,
          :LineItems => [Xero.Model.LineItem.t()] | nil,
          :Date => String.t() | nil,
          :DueDate => String.t() | nil,
          :LineAmountTypes => Xero.Model.LineAmountTypes.t() | nil,
          :InvoiceNumber => String.t() | nil,
          :Reference => String.t() | nil,
          :BrandingThemeID => String.t() | nil,
          :Url => String.t() | nil,
          :CurrencyCode => Xero.Model.CurrencyCode.t() | nil,
          :CurrencyRate => float() | nil,
          :Status => String.t() | nil,
          :SentToContact => boolean() | nil,
          :ExpectedPaymentDate => String.t() | nil,
          :PlannedPaymentDate => String.t() | nil,
          :CISDeduction => float() | nil,
          :CISRate => float() | nil,
          :SubTotal => float() | nil,
          :TotalTax => float() | nil,
          :Total => float() | nil,
          :TotalDiscount => float() | nil,
          :InvoiceID => String.t() | nil,
          :RepeatingInvoiceID => String.t() | nil,
          :HasAttachments => boolean() | nil,
          :IsDiscounted => boolean() | nil,
          :Payments => [Xero.Model.Payment.t()] | nil,
          :Prepayments => [Xero.Model.Prepayment.t()] | nil,
          :Overpayments => [Xero.Model.Overpayment.t()] | nil,
          :AmountDue => float() | nil,
          :AmountPaid => float() | nil,
          :FullyPaidOnDate => String.t() | nil,
          :AmountCredited => float() | nil,
          :UpdatedDateUTC => String.t() | nil,
          :CreditNotes => [Xero.Model.CreditNote.t()] | nil,
          :Attachments => [Xero.Model.Attachment.t()] | nil,
          :HasErrors => boolean() | nil,
          :StatusAttributeString => String.t() | nil,
          :ValidationErrors => [Xero.Model.ValidationError.t()] | nil,
          :Warnings => [Xero.Model.ValidationError.t()] | nil
        }
end

defimpl Poison.Decoder, for: Xero.Model.Invoice do
  import Xero.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:Contact, :struct, Xero.Model.Contact, options)
    |> deserialize(:LineItems, :list, Xero.Model.LineItem, options)
    |> deserialize(:LineAmountTypes, :struct, Xero.Model.LineAmountTypes, options)
    |> deserialize(:CurrencyCode, :struct, Xero.Model.CurrencyCode, options)
    |> deserialize(:Payments, :list, Xero.Model.Payment, options)
    |> deserialize(:Prepayments, :list, Xero.Model.Prepayment, options)
    |> deserialize(:Overpayments, :list, Xero.Model.Overpayment, options)
    |> deserialize(:CreditNotes, :list, Xero.Model.CreditNote, options)
    |> deserialize(:Attachments, :list, Xero.Model.Attachment, options)
    |> deserialize(:ValidationErrors, :list, Xero.Model.ValidationError, options)
    |> deserialize(:Warnings, :list, Xero.Model.ValidationError, options)
  end
end
