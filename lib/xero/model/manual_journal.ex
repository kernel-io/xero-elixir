# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Model.ManualJournal do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :Narration,
    :JournalLines,
    :Date,
    :LineAmountTypes,
    :Status,
    :Url,
    :ShowOnCashBasisReports,
    :HasAttachments,
    :UpdatedDateUTC,
    :ManualJournalID,
    :StatusAttributeString,
    :Warnings,
    :ValidationErrors,
    :Attachments
  ]

  @type t :: %__MODULE__{
          :Narration => String.t(),
          :JournalLines => [Xero.Model.ManualJournalLine.t()] | nil,
          :Date => String.t() | nil,
          :LineAmountTypes => Xero.Model.LineAmountTypes.t() | nil,
          :Status => String.t() | nil,
          :Url => String.t() | nil,
          :ShowOnCashBasisReports => boolean() | nil,
          :HasAttachments => boolean() | nil,
          :UpdatedDateUTC => String.t() | nil,
          :ManualJournalID => String.t() | nil,
          :StatusAttributeString => String.t() | nil,
          :Warnings => [Xero.Model.ValidationError.t()] | nil,
          :ValidationErrors => [Xero.Model.ValidationError.t()] | nil,
          :Attachments => [Xero.Model.Attachment.t()] | nil
        }
end

defimpl Poison.Decoder, for: Xero.Model.ManualJournal do
  import Xero.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:JournalLines, :list, Xero.Model.ManualJournalLine, options)
    |> deserialize(:LineAmountTypes, :struct, Xero.Model.LineAmountTypes, options)
    |> deserialize(:Warnings, :list, Xero.Model.ValidationError, options)
    |> deserialize(:ValidationErrors, :list, Xero.Model.ValidationError, options)
    |> deserialize(:Attachments, :list, Xero.Model.Attachment, options)
  end
end
