# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Xero.Model.Organisation do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :OrganisationID,
    :APIKey,
    :Name,
    :LegalName,
    :PaysTax,
    :Version,
    :OrganisationType,
    :BaseCurrency,
    :CountryCode,
    :IsDemoCompany,
    :OrganisationStatus,
    :RegistrationNumber,
    :EmployerIdentificationNumber,
    :TaxNumber,
    :FinancialYearEndDay,
    :FinancialYearEndMonth,
    :SalesTaxBasis,
    :SalesTaxPeriod,
    :DefaultSalesTax,
    :DefaultPurchasesTax,
    :PeriodLockDate,
    :EndOfYearLockDate,
    :CreatedDateUTC,
    :Timezone,
    :OrganisationEntityType,
    :ShortCode,
    :Class,
    :Edition,
    :LineOfBusiness,
    :Addresses,
    :Phones,
    :ExternalLinks,
    :PaymentTerms
  ]

  @type t :: %__MODULE__{
          :OrganisationID => String.t() | nil,
          :APIKey => String.t() | nil,
          :Name => String.t() | nil,
          :LegalName => String.t() | nil,
          :PaysTax => boolean() | nil,
          :Version => String.t() | nil,
          :OrganisationType => String.t() | nil,
          :BaseCurrency => Xero.Model.CurrencyCode.t() | nil,
          :CountryCode => Xero.Model.CountryCode.t() | nil,
          :IsDemoCompany => boolean() | nil,
          :OrganisationStatus => String.t() | nil,
          :RegistrationNumber => String.t() | nil,
          :EmployerIdentificationNumber => String.t() | nil,
          :TaxNumber => String.t() | nil,
          :FinancialYearEndDay => integer() | nil,
          :FinancialYearEndMonth => integer() | nil,
          :SalesTaxBasis => String.t() | nil,
          :SalesTaxPeriod => String.t() | nil,
          :DefaultSalesTax => String.t() | nil,
          :DefaultPurchasesTax => String.t() | nil,
          :PeriodLockDate => String.t() | nil,
          :EndOfYearLockDate => String.t() | nil,
          :CreatedDateUTC => String.t() | nil,
          :Timezone => Xero.Model.TimeZone.t() | nil,
          :OrganisationEntityType => String.t() | nil,
          :ShortCode => String.t() | nil,
          :Class => String.t() | nil,
          :Edition => String.t() | nil,
          :LineOfBusiness => String.t() | nil,
          :Addresses => [Xero.Model.AddressForOrganisation.t()] | nil,
          :Phones => [Xero.Model.Phone.t()] | nil,
          :ExternalLinks => [Xero.Model.ExternalLink.t()] | nil,
          :PaymentTerms => Xero.Model.PaymentTerm.t() | nil
        }
end

defimpl Poison.Decoder, for: Xero.Model.Organisation do
  import Xero.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:BaseCurrency, :struct, Xero.Model.CurrencyCode, options)
    |> deserialize(:CountryCode, :struct, Xero.Model.CountryCode, options)
    |> deserialize(:Timezone, :struct, Xero.Model.TimeZone, options)
    |> deserialize(:Addresses, :list, Xero.Model.AddressForOrganisation, options)
    |> deserialize(:Phones, :list, Xero.Model.Phone, options)
    |> deserialize(:ExternalLinks, :list, Xero.Model.ExternalLink, options)
    |> deserialize(:PaymentTerms, :struct, Xero.Model.PaymentTerm, options)
  end
end
